name: EIP-resso Config Server - Production Deployment

on:
  push:
    branches: [main]
    paths:
      - 'config-server/**'
      - '.github/workflows/config-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'config-server/**'

env:
  IMAGE_NAME: eipresso/config-server
  KUBERNETES_NAMESPACE: eip-resso

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        
    - name: Run unit tests
      run: |
        cd config-server
        mvn clean test
        
    - name: Run integration tests
      run: |
        cd config-server
        mvn verify -Pintegration-tests
        
    - name: Build application
      run: |
        cd config-server
        mvn clean package -DskipTests
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: config-server-jar
        path: config-server/target/*.jar

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

  # Build Docker image
  build-image:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: config-server-jar
        path: config-server/target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./config-server
        file: ./config-server/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-image
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Update ConfigMap (staging)
      run: |
        kubectl create configmap config-server-config \
          --from-literal=ENVIRONMENT=staging \
          --from-literal=CLUSTER_NAME=eip-resso-staging \
          --from-literal=CONFIG_GIT_URI=${{ secrets.CONFIG_GIT_URI_STAGING }} \
          --from-literal=LOG_LEVEL_EIPRESSO=DEBUG \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Update Secret (staging)
      run: |
        kubectl create secret generic config-server-secrets \
          --from-literal=CONFIG_SERVER_PASSWORD=${{ secrets.CONFIG_PASSWORD_STAGING }} \
          --from-literal=CONFIG_GIT_USERNAME=${{ secrets.GIT_USERNAME_STAGING }} \
          --from-literal=CONFIG_GIT_TOKEN=${{ secrets.GIT_TOKEN_STAGING }} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy to staging
      run: |
        # Update image in deployment
        kubectl set image deployment/config-server \
          config-server=${{ needs.build-image.outputs.image-tag }} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }}
          
        # Wait for rollout
        kubectl rollout status deployment/config-server \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --timeout=300s
          
    - name: Verify staging deployment
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app=config-server \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --timeout=300s
          
        # Test health endpoint
        kubectl port-forward service/config-server 8888:8888 \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} &
        sleep 10
        curl -f http://localhost:8888/actuator/health || exit 1

  # Run E2E tests against staging
  e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run E2E tests
      run: |
        # Configure kubectl for staging
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Run comprehensive E2E tests
        ./scripts/e2e-tests.sh staging

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-image, e2e-tests]
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        
    - name: Update ConfigMap (production)
      run: |
        kubectl create configmap config-server-config \
          --from-literal=ENVIRONMENT=production \
          --from-literal=CLUSTER_NAME=eip-resso-prod \
          --from-literal=CONFIG_GIT_URI=${{ secrets.CONFIG_GIT_URI_PRODUCTION }} \
          --from-literal=LOG_LEVEL_EIPRESSO=INFO \
          --from-literal=METRICS_PROMETHEUS_ENABLED=true \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Update Secret (production)
      run: |
        kubectl create secret generic config-server-secrets \
          --from-literal=CONFIG_SERVER_PASSWORD=${{ secrets.CONFIG_PASSWORD_PRODUCTION }} \
          --from-literal=CONFIG_GIT_USERNAME=${{ secrets.GIT_USERNAME_PRODUCTION }} \
          --from-literal=CONFIG_GIT_TOKEN=${{ secrets.GIT_TOKEN_PRODUCTION }} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy to production (blue-green)
      run: |
        # Blue-green deployment strategy
        kubectl patch deployment config-server \
          -p '{"spec":{"template":{"spec":{"containers":[{"name":"config-server","image":"'${{ needs.build-image.outputs.image-tag }}'"}]}}}}' \
          --namespace=${{ env.KUBERNETES_NAMESPACE }}
          
        # Wait for new version to be ready
        kubectl rollout status deployment/config-server \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --timeout=600s
          
    - name: Production smoke tests
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app=config-server \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --timeout=300s
          
        # Run smoke tests
        ./scripts/smoke-tests.sh production
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "Config Server deployed successfully to production ðŸš€"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Configuration change handling
  handle-config-changes:
    runs-on: ubuntu-latest
    if: github.event.repository.name == 'eip-resso-config'  # Separate config repo
    steps:
    - name: Trigger config refresh
      run: |
        # Call actuator refresh endpoint on all config server instances
        kubectl get pods -l app=config-server \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          -o jsonpath='{.items[*].metadata.name}' | \
        xargs -I {} kubectl exec {} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} -- \
          curl -X POST http://localhost:8889/actuator/refresh
          
    - name: Notify downstream services
      run: |
        # Notify other services about config changes
        kubectl get pods -l component!=configuration \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          -o jsonpath='{.items[*].metadata.name}' | \
        xargs -I {} kubectl exec {} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} -- \
          curl -X POST http://localhost:8889/actuator/refresh 