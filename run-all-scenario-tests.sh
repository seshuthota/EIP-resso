#!/bin/bash

# EIP-resso - Complete Scenario Testing Suite
# Master script to run all service scenario tests and provide comprehensive reporting

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Project configuration
PROJECT_NAME="EIP-resso Coffee Shop Microservices"
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Service testing status tracking
declare -A service_status
declare -A service_test_counts
declare -A service_descriptions

echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${BLUE}                    ${PROJECT_NAME} - Master Scenario Testing${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${CYAN}Comprehensive Apache Camel EIP Pattern Testing Across All Services${NC}"
echo -e "${CYAN}Execution Time: ${TIMESTAMP}${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo

# Function to print service section header
print_service_section() {
    local service_name="$1"
    local service_port="$2"
    local patterns="$3"
    
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë üîß Testing: ${service_name} (Port: ${service_port})${NC}"
    echo -e "${PURPLE}‚ïë üìã EIP Patterns: ${patterns}${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
}

# Function to run service test suite
run_service_tests() {
    local service_dir="$1"
    local service_name="$2"
    local service_port="$3"
    local patterns="$4"
    
    print_service_section "$service_name" "$service_port" "$patterns"
    
    if [ ! -d "$service_dir" ]; then
        echo -e "${RED}‚ùå Service directory not found: $service_dir${NC}"
        service_status["$service_name"]="MISSING"
        return 1
    fi
    
    if [ ! -f "$service_dir/run-scenario-tests.sh" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No scenario tests found for $service_name${NC}"
        service_status["$service_name"]="NO_TESTS"
        return 1
    fi
    
    echo -e "${CYAN}üöÄ Executing scenario tests for $service_name...${NC}"
    
    cd "$service_dir"
    
    # Make script executable
    chmod +x run-scenario-tests.sh
    
    # Run the tests and capture result
    if ./run-scenario-tests.sh > "../${service_name// /-}-test-results.log" 2>&1; then
        echo -e "${GREEN}‚úÖ $service_name tests completed successfully${NC}"
        service_status["$service_name"]="PASSED"
        
        # Extract test counts
        local test_log="../${service_name// /-}-test-results.log"
        if [ -f "$test_log" ]; then
            local tests=$(grep -oP "Total Test Methods: \K\d+" "$test_log" || echo "0")
            local passed=$(grep -oP "‚úÖ Passed: \K\d+" "$test_log" || echo "0")
            local failed=$(grep -oP "‚ùå Failed: \K\d+" "$test_log" || echo "0")
            service_test_counts["$service_name"]="$tests:$passed:$failed"
        fi
    else
        echo -e "${RED}‚ùå $service_name tests failed${NC}"
        service_status["$service_name"]="FAILED"
        
        # Show first few lines of errors
        local test_log="../${service_name// /-}-test-results.log"
        if [ -f "$test_log" ]; then
            echo -e "${RED}   üí• Error Summary:${NC}"
            tail -10 "$test_log" | head -5
        fi
    fi
    
    cd "$BASE_DIR"
    echo
}

# Start comprehensive testing
cd "$BASE_DIR"

echo -e "${YELLOW}üîç Discovering EIP-resso services and their testing capabilities...${NC}"
echo

# Service definitions with their EIP patterns
services=(
    "config-server:Configuration Management Service:8888:Git-Backed Config, Environment Promotion, Dynamic Refresh, Service Discovery"
    "user-service:User Management Service:8081:Dead Letter Channel, Idempotent Consumer, Wire Tap, Content Enricher"
    "product-catalog:Product Catalog Service:8082:Cache Pattern, Multicast, Recipient List, Polling Consumer, Content-Based Router"
    "order-management:Order Management Service:8083:Event Sourcing, Split/Aggregate, Wire Tap, Timer-based Monitoring"
    "notification-service:Notification Service:8086:Publish-Subscribe, Message Filter, Throttling, Dead Letter Channel"
    "analytics-service:Analytics Service:8087:Event Sourcing, CQRS, Streaming, Aggregator"
)

# Test implemented services
echo -e "${CYAN}üìä Testing Services with Scenario Test Suites:${NC}"
echo

for service_info in "${services[@]}"; do
    IFS=':' read -r service_dir service_name service_port patterns <<< "$service_info"
    service_descriptions["$service_name"]="$patterns"
    
    if [ -d "$service_dir" ] && [ -f "$service_dir/run-scenario-tests.sh" ]; then
        run_service_tests "$service_dir" "$service_name" "$service_port" "$patterns"
    else
        echo -e "${YELLOW}‚è≥ $service_name - Scenario tests pending implementation${NC}"
        service_status["$service_name"]="PENDING"
        echo
    fi
done

# Generate comprehensive summary
echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${PURPLE}‚ïë üìä EIP-resso Comprehensive Testing Summary${NC}"
echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

echo -e "${BLUE}üéØ Service Testing Status Overview:${NC}"
echo

total_services=0
services_tested=0
services_passed=0
services_failed=0
total_tests=0
total_passed=0
total_failed=0

for service_name in "${!service_status[@]}"; do
    status="${service_status[$service_name]}"
    patterns="${service_descriptions[$service_name]}"
    
    total_services=$((total_services + 1))
    
    case "$status" in
        "PASSED")
            echo -e "   ‚úÖ ${GREEN}$service_name${NC} - All tests passed"
            echo -e "      üìã EIP Patterns: $patterns"
            services_tested=$((services_tested + 1))
            services_passed=$((services_passed + 1))
            
            # Add to test totals
            if [[ "${service_test_counts[$service_name]}" ]]; then
                IFS=':' read -r tests passed failed <<< "${service_test_counts[$service_name]}"
                total_tests=$((total_tests + tests))
                total_passed=$((total_passed + passed))
                total_failed=$((total_failed + failed))
                echo -e "      üìà Tests: $tests Total, $passed Passed, $failed Failed"
            fi
            ;;
        "FAILED")
            echo -e "   ‚ùå ${RED}$service_name${NC} - Tests failed"
            echo -e "      üìã EIP Patterns: $patterns"
            services_tested=$((services_tested + 1))
            services_failed=$((services_failed + 1))
            ;;
        "PENDING")
            echo -e "   ‚è≥ ${YELLOW}$service_name${NC} - Tests pending implementation"
            echo -e "      üìã EIP Patterns: $patterns"
            ;;
        "NO_TESTS"|"MISSING")
            echo -e "   ‚ö†Ô∏è  ${YELLOW}$service_name${NC} - No scenario tests available"
            echo -e "      üìã EIP Patterns: $patterns"
            ;;
    esac
    echo
done

echo -e "${CYAN}üìà Overall Statistics:${NC}"
echo -e "   üèóÔ∏è  Total Services: ${BLUE}$total_services${NC}"
echo -e "   üß™ Services Tested: ${BLUE}$services_tested${NC}"
echo -e "   ‚úÖ Services Passed: ${GREEN}$services_passed${NC}"
echo -e "   ‚ùå Services Failed: ${RED}$services_failed${NC}"
echo -e "   ‚è≥ Services Pending: ${YELLOW}$((total_services - services_tested))${NC}"
echo
echo -e "   üìä Test Methods: ${BLUE}$total_tests${NC} Total, ${GREEN}$total_passed${NC} Passed, ${RED}$total_failed${NC} Failed"
echo

# Architecture summary
echo -e "${BLUE}üèóÔ∏è EIP-resso Architecture & Pattern Implementation Status:${NC}"
echo

implemented_patterns=(
    "‚úÖ Git-Backed Configuration Management (Config Server)"
    "‚úÖ Dead Letter Channel Pattern (User Service)"
    "‚úÖ Idempotent Consumer Pattern (User Service)"
    "‚úÖ Wire Tap Pattern (User Service)"
    "‚úÖ Content Enricher Pattern (User Service)"
    "‚úÖ Cache Pattern (Product Catalog)"
    "‚úÖ Multicast Pattern (Product Catalog)"
    "‚úÖ Recipient List Pattern (Product Catalog)"
    "‚úÖ Polling Consumer Pattern (Product Catalog)"
    "‚úÖ Content-Based Router Pattern (Product Catalog)"
    "‚úÖ Event Sourcing Pattern (Order Management)"
    "‚úÖ Split/Aggregate Pattern (Order Management)"
    "‚úÖ Timer-based Monitoring (Order Management)"
    "‚úÖ Publish-Subscribe Pattern (Notification Service)"
    "‚úÖ Message Filter Pattern (Notification Service)"
    "‚úÖ Throttling Pattern (Notification Service)"
)

pending_patterns=(
    "‚è≥ Circuit Breaker Pattern (Payment Service)"
    "‚è≥ Saga Pattern (Order Orchestration)"
    "‚è≥ Process Manager Pattern (Order Orchestration)"
    "‚è≥ CQRS Pattern (Analytics Service)"
    "‚è≥ Streaming Pattern (Analytics Service)"
    "‚è≥ File Transfer Patterns (External Integration)"
)

echo -e "${GREEN}üìã Implemented EIP Patterns (${#implemented_patterns[@]}):${NC}"
for pattern in "${implemented_patterns[@]}"; do
    echo -e "   $pattern"
done

echo
echo -e "${YELLOW}‚è≥ Pending EIP Patterns (${#pending_patterns[@]}):${NC}"
for pattern in "${pending_patterns[@]}"; do
    echo -e "   $pattern"
done

echo

# Generate test execution recommendations
echo -e "${CYAN}üéØ Next Steps & Recommendations:${NC}"
echo

if [ $services_failed -gt 0 ]; then
    echo -e "${RED}üîß Immediate Actions Required:${NC}"
    for service_name in "${!service_status[@]}"; do
        if [ "${service_status[$service_name]}" = "FAILED" ]; then
            echo -e "   ‚Ä¢ Review test failures in $service_name"
            echo -e "     Check log: ${service_name// /-}-test-results.log"
        fi
    done
    echo
fi

pending_services=$((total_services - services_tested))
if [ $pending_services -gt 0 ]; then
    echo -e "${YELLOW}üìù Development Priorities:${NC}"
    echo -e "   ‚Ä¢ Implement scenario tests for $pending_services remaining services"
    echo -e "   ‚Ä¢ Focus on Payment Service and Order Orchestration for critical business flows"
    echo -e "   ‚Ä¢ Complete Analytics Service for real-time business intelligence"
    echo
fi

if [ $services_passed -gt 0 ]; then
    echo -e "${GREEN}üéâ Achievements:${NC}"
    echo -e "   ‚Ä¢ $services_passed services with comprehensive scenario testing"
    echo -e "   ‚Ä¢ ${#implemented_patterns[@]} advanced EIP patterns successfully implemented"
    echo -e "   ‚Ä¢ Production-ready coffee shop microservices architecture"
    echo -e "   ‚Ä¢ $total_passed test methods validating business scenarios"
    echo
fi

# Final status determination
if [ $services_failed -eq 0 ] && [ $services_passed -gt 0 ]; then
    echo -e "${GREEN}üèÜ Overall Status: SUCCESS - All tested services passing${NC}"
    exit_code=0
elif [ $services_failed -gt 0 ]; then
    echo -e "${RED}‚ö†Ô∏è  Overall Status: ISSUES - Some services have test failures${NC}"
    exit_code=1
else
    echo -e "${YELLOW}‚è≥ Overall Status: IN PROGRESS - Testing implementation ongoing${NC}"
    exit_code=0
fi

echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${BLUE}                          Testing Summary Complete!${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

# Cleanup old log files (keep recent ones)
find . -name "*-test-results.log" -mtime +7 -delete 2>/dev/null || true

exit $exit_code 